name: Send Newsletter

on:
  workflow_dispatch:
    inputs:
      force_send:
        type: string
        required: true
        description: Enter path to file to send
  push:
    branches:
      - main
    paths:
      - 'src/content/blog/**'

permissions:
  contents: write

jobs:
  send-newsletter:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    env:
      ARTICLE_PATH: ''
      ARTICLE_SLUG: ''
      FORCE: ''
    steps:
      - name: Trim manual workflow input
        if: github.event.inputs.force_send != ''
        id: trim
        run: |
          trimmed_input=$(echo "${{ github.event.inputs.force_send }}" | xargs)
          echo "trimmed_input=$trimmed_input" >> $GITHUB_OUTPUT

      - name: Set manual article path
        if: steps.trim.outputs.trimmed_input != ''
        id: set-manual-article-path
        run: |
          # Extract article slug from filename (remove .md extension)
          post_filename=$(basename "${{ steps.trim.outputs.trimmed_input }}")
          article_slug="${post_filename%.md}"

          echo "ARTICLE_PATH=${{ steps.trim.outputs.trimmed_input }}" >> $GITHUB_ENV
          echo "ARTICLE_SLUG=$article_slug" >> $GITHUB_ENV
          echo "FORCE=--force" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure Git
        run: |
          git config user.name "Github Actions"
          git config user.email "github-actions@github.com"

      - name: Get latest article info
        if: env.ARTICLE_PATH == ''
        id: latest-article
        run: |
          # Find the most recent blog post by pubDate in frontmatter
          source scripts/extract-frontmatter.sh
          latest_post=""
          latest_date=""

          for post in src/content/blog/*.md; do
              if [[ -f "$post" ]]; then
                  pub_date=$(extract_frontmatter "$post" "pubDate")
                  draft=$(extract_frontmatter "$post" "draft")
                  if [[ -n "$pub_date" && "$draft" != "true" ]]; then
                      if [[ "$pub_date" > "$latest_date" ]]; then
                          latest_date="$pub_date"
                          latest_post="$post"
                      fi
                  fi
              fi
          done

          if [[ -z "$latest_post" ]]; then
              echo "Error: No valid blog posts found"
              exit 1
          fi

          # Extract article slug from filename (remove .md extension)
          post_filename=$(basename "$latest_post")
          article_slug="${post_filename%.md}"

          # Check if newsletter has already been sent for this article
          newsletter_tag="newsletter-sent-$article_slug"
          if git tag --list "$newsletter_tag" | grep -q "$newsletter_tag"; then
              echo "Skipping newsletter send - Article $article_slug has already been sent"
          else
              echo "Article $article_slug has not been sent via newsletter yet"
              echo "ARTICLE_PATH=$latest_post" >> $GITHUB_ENV
              echo "ARTICLE_SLUG=$article_slug" >> $GITHUB_ENV
          fi

      - name: Setup pnpm
        if: env.ARTICLE_PATH != ''
        uses: pnpm/action-setup@v2
        with:
          version: '10.15.1'

      - name: Setup Node.js
        if: env.ARTICLE_PATH != ''
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install dependencies
        if: env.ARTICLE_PATH != ''
        run: pnpm install

      - name: Send newsletter
        if: env.ARTICLE_PATH != ''
        id: send-newsletter
        env:
          SUPABASE_URL: ${{ vars.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ vars.SUPABASE_ANON_KEY }}
          SITE_URL: ${{ vars.SITE_URL }}
        run: |
          # Run the newsletter command and capture both output and exit code
          if output=$(pnpm run send-newsletter ${{ env.ARTICLE_PATH }} ${{ env.FORCE }} 2>&1); then
            result=$(echo "$output" | tail -n 1)
            echo "$result"
            echo "result=$result" >> $GITHUB_OUTPUT
          else
            echo "Newsletter sending failed with exit code $?"
            echo "Output: $output"
            exit 1
          fi

      - name: Tag repo with newsletter sent tag
        if: steps.send-newsletter.outputs.result == 'Newsletter sent successfully'
        run: |
          if [[ -n "${{ env.FORCE }}" ]]; then
            newsletter_tag="newsletter-sent-${{ env.ARTICLE_SLUG }}-force-$(date +%Y%m%d%H%M%S)"
          else
            newsletter_tag="newsletter-sent-${{ env.ARTICLE_SLUG }}"
          fi
          git tag "$newsletter_tag"
          git push origin "$newsletter_tag"
