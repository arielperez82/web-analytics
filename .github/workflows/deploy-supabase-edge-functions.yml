# .github/workflows/deploy-supabase-edge-functions.yml
# Purpose: Deploy Supabase Edge Functions with PR label-based force deploy logic

name: Deploy Edge Functions

on:
  push:
    branches:
      - main
      - test
    paths:
      - 'supabase/functions/**'
      - 'supabase/config.toml'

  workflow_dispatch:
    inputs:
      deploy_all:
        type: boolean
        description: Deploy all functions
      deploy_confirm_subscription:
        type: boolean
        description: Deploy confirm subscription function
      deploy_send_newsletter:
        type: boolean
        description: Deploy send newsletter function
      deploy_subscribe:
        type: boolean
        description: Deploy subscribe function
      deploy_unsubscribe:
        type: boolean
        description: Deploy unsubscribe function

jobs:
  deploy:
    name: 'Deploy to Supabase'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config user.name "Github Actions"
          git config user.email "github-actions@github.com"

      - uses: tj-actions/changed-files@v46
        id: changed-files
        with:
          files: supabase/functions/**

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Deploy functions
        run: |
          set -e
          deploy_function() {
            fn="$1"
            echo "Deploying $fn"
            supabase functions deploy "$fn" --project-ref "$PROJECT_ID"          

            # Tag the deployment for the function
            function_deployment_tag="supabase-function-deployment-${fn}-$(date +%Y%m%d%H%M%S)"
            git tag "$function_deployment_tag"
            git push origin "$function_deployment_tag"
          }

          # Check which functions are to be force deployed by the workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.deploy_all }}" == "true" || "${{ github.event.inputs.deploy_confirm_subscription }}" == "true" ]]; then
              deploy_function "confirm-subscription"
            fi
            if [[ "${{ github.event.inputs.deploy_all }}" == "true" || "${{ github.event.inputs.deploy_send_newsletter }}" == "true" ]]; then
              deploy_function "send-newsletter"
            fi
            if [[ "${{ github.event.inputs.deploy_all }}" == "true" || "${{ github.event.inputs.deploy_subscribe }}" == "true" ]]; then
              deploy_function "subscribe"
            fi
            if [[ "${{ github.event.inputs.deploy_all }}" == "true" || "${{ github.event.inputs.deploy_unsubscribe }}" == "true" ]]; then
              deploy_function "unsubscribe"
            fi
          fi
          # Check if any functions should be deployed from the changed files
          if [[ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]]; then
            for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
              fn=$(basename $(dirname "$file"))
              deploy_function "$fn"
            done
          else
            echo "No changed functions to deploy."
          fi
